[tool.poetry]
name = "{{cookiecutter.project_name}}"
version = "{{cookiecutter.version}}"
description = "{{cookiecutter.project_short_description}}"
authors = ["{{cookiecutter.author_name}} <{{cookiecutter.email}}>"]


[tool.poetry.dependencies]
python = "^3.10"
fastapi = "^0.112.0"
uvicorn = "0.30.5"
pydantic = {extras = ["email"], version = "^2.9.2"}
requests = "^2.32.0"
loguru = "^0.7.0"
joblib = "^1.2.0"
poethepoet = "^0.27.0"
pydantic-settings = "^2.4.0"
colorlog = "^6.8.2"
pytz = "^2024.1"
openai = "^1.38.0"
pyyaml = "^6.0.1"
alembic = "^1.13.2"
pymysql = "^1.1.1"
sqlalchemy = "^2.0.32"
passlib = "^1.7.4"
python-jose = "^3.3.0"
python-multipart = "^0.0.9"

[tool.poetry.group.dev.dependencies]
pytest = "^7.2"
pytest-cov = "^5.0.0"
pytest-ordering = "^0.6"
black = {version = "^24.3", allow-prereleases = true}
autopep8 = "^2.0.0"
ipdb = "^0.13.0"
mypy = "^1.11.1"
ruff = "^0.5.6"
types-pyyaml = "^6.0.12.20240724"
types-pytz = "^2024.1.0.20240417"

[tool.poetry.group.aws]
optional = true

[tool.poetry.group.aws.dependencies]
mangum = "^0.17.0"


[[tool.poetry.packages]]
include = "{{cookiecutter.project_slug}}"
from = "src"


[tool.poe.tasks]
_build = { shell = "poetry build" }
_install = { shell = "poetry install" }
_test = { shell = "pytest tests" }
_fix = { shell = 'ruff check . --fix' }
_lint = { shell = "mypy ." }
_format = { shell = "ruff format  ." }

clean = { shell = "make clean", help = "Remove all files generated by builds and tests." }
run = { shell = "poetry run python -m {{cookiecutter.project_slug}}.main" }
check = { sequence = ["_install", "_fix", "_lint", "_format"], ignore_fail = false, help = "Auto-fix and format the code using ruff." }
test = { sequence = ["_test"]}
check-test = { sequence = ["check", "_test"]}

[tool.pytest.ini_options]
testpaths = "tests"
addopts = "--cov=src --cov-report=term-missing:skip-covered --cov-report=xml:cov.xml --junitxml=report.xml --cov-fail-under=85 tests/"
python_files = "tests.py test_*.py *_tests.py"
asyncio_mode = "auto"

[tool.ruff]
target-version = "py310"
line-length = 120
output-format = "grouped"
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
    "*/alembic/*"
]

[tool.ruff.lint]
extend-select = [
    "C", # Complexity
    "E", # PEP8 errors
    "F", # PEP8 formatting
    "I", # Import sorting
    "UP", # Pyupgrade upgrades
    "W", # PEP8 warnings
    "T201", # print found
    "T10", # dubug found
    "FLY", # static-join-to-f-string
    "RET", # unnecessary-return
    "N", # name-conventions
    "PIE", # Improper comments
    "SIM", # simplify
    "ERA", # commented-out-code
    "ASYNC", # async
    "TID", # tidy-imports
    "A", # bad name
    "ARG", # bad arguments
    "PTH", # use-pathlib
    "RUF", # specific rules
    "B", # flake8-bugbear.
    "PT", # pytest
    "PERF", # Perflint
]
ignore = [
    "C901", # Function too complex
    "E501", # Line length (handled by ruff-format)
    "UP007", # X | Y style Unions
    "B008", # Do not perform function calls in argument defaults
    "PT006", # Ignore pytest.mark.parametrize
    "PT011", # Ignore `pytest.raises(ValueError)` is too broad
    "D203", # one-blank-line-before-class
    "D212",# multi-line-summary-first-line
    "ERA001",
    "W291",
    "RUF001",
    "RET504",
    "SIM108",
    "F401",
    "PT009",
    "PTH103",
    "PTH109",
    "PTH112",
    "PTH118",
    "PTH123",
]

[tool.ruff.lint.flake8-builtins]
builtins-ignorelist = ["input", "id", "bytes"]

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.format]
exclude = ["*/alembic/*"]

[tool.mypy]
ignore_missing_imports = true
check_untyped_defs = true
disallow_untyped_defs = false

[build-system]
requires = ["poetry>=0.12"]
build-backend = "poetry.masonry.api"

[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311']
include = '\.pyi?$'
exclude = '''
/(
  \.toml
  |\.sh
  |\.git
  |\.ini
  |Dockerfile
  |Jenkinfile
)/
'''
